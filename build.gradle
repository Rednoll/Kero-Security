buildscript {
	
	repositories {
	
		jcenter()
	}
	
	dependencies {
		
		classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.+'
		classpath 'com.palantir.gradle.gitversion:gradle-git-version:0.12.+'
		classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:latest.release'
	}
}

plugins {

	id 'java-library'
	id 'jacoco'
	id 'maven-publish'
}

apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'com.palantir.git-version'

ext {
	
	git = 'https://github.com/Rednoll/kero-security.git'
	vcsTag = versionDetails().lastTag
}

ext.determineVersion = {

	def details = versionDetails()
	
	if(details.lastTag ==~ /release@[0-9]+\.[0-9]+\.[0-9]+/) {
	
		if(details.commitDistance == 0) {
			
			return details.lastTag - ~/^(.*@)|.dirty$/;
		}
		else {
		
			def snapVersion = details.lastTag - ~/^(.*@)|.dirty$/;

			snapVersion = (snapVersion - ~/\..*$/) + "." + (snapVersion.replaceAll(/^[0-9]+\.|\.[0-9]+$/, "").toInteger() + 1) + ".0"

			snapVersion += "-SNAPSHOT"
			
			return snapVersion;
		}
	}
	else if(details.lastTag ==~ /.*@[0-9]+\.[0-9]+\.[0-9]+/) {
	
		return details.lastTag - ~/^(.*@)|.dirty$/ + "-SNAPSHOT";
	}

	throw new InvalidUserDataException("Can't determine version! Last commit not match .*@[0-9]+\\.[0-9]+\\.[0-9]+")
}

sourceCompatibility = '1.8'

group = 'com.github.rednoll'
version = determineVersion()
description = 'Kero-Security is a library for statically controlling access to properties of objects / classes.'

repositories {

	mavenCentral()
}

dependencies {

	compile group: 'commons-codec', name: 'commons-codec', version: '1.14'
	compile group: 'net.bytebuddy', name: 'byte-buddy', version: '1.10.14'

	implementation 'org.slf4j:slf4j-api:1.7.25'
	
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
	testImplementation 'org.junit.platform:junit-platform-launcher:1.5.2'
	
	testImplementation 'org.slf4j:slf4j-log4j12:1.7.25'   
	testImplementation 'log4j:log4j:1.2.17'
	
	testImplementation 'org.mockito:mockito-all:1.10.19'
	
	testImplementation 'com.google.jimfs:jimfs:1.1'
	
}

javadoc {
	
	source = sourceSets.main.allJava
	classpath = configurations.compile
}

task sourcesJar(type: Jar, dependsOn: classes) {

    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {

    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {

    archives sourcesJar
    archives javadocJar
}

test {

	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

jacocoTestReport {

    dependsOn test
	
	reports {
	
        xml.enabled true
    }
}

def pomConfig = {

	licenses {
		
		license {
			
			name 'The Apache License, Version 2.0'
			url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
			distribution 'repo'
		}
		
		license {
			
			name 'The MIT License (MIT)'
			url 'http://opensource.org/licenses/MIT'
			distribution 'repo'
		}
	}
	
	developers {
		
		developer {
		
			name 'Stepan Glumov (Kerovazzky)'
			email 'rednoll12@gmail.com'
			organization 'Rednoll (Kerovazzky)'
			organizationUrl 'https://github.com/Rednoll'
		}
	}
	
	scm {
		
		url project.git
	}
}

publishing {

	publications {
		
		PomFile(MavenPublication) {
			
			pom.withXml {
				
				def root = asNode()
					root.appendNode('name', project.name)
					root.appendNode('description', project.description)
					root.appendNode('url', project.git)
				
				root.children().last() + pomConfig
			
				def dependenciesNode = asNode().getAt('dependencies')[0] ?: asNode().appendNode('dependencies')
			  
				configurations.implementation.allDependencies.each {
				
					if(it.name != 'unspecified') {
				   
						def dependencyNode = dependenciesNode.appendNode('dependency')
					  
						dependencyNode.appendNode('groupId', it.group)
						dependencyNode.appendNode('artifactId', it.name)
						dependencyNode.appendNode('version', it.version)
					}
				}
			}
		}
	}
}

artifactory {

	contextUrl = 'https://oss.jfrog.org'
	
	resolve {
	
		repository {
			
			repoKey = 'libs-release'
		}
	}
	
	publish {
	
		repository {
		
			if(project.version.endsWith("-SNAPSHOT")) {
				
				repoKey = 'oss-snapshot-local'
			}
			else {
			
				repoKey = 'oss-release-local' 
			}

			username = 'kerovazzky'
			password = System.getenv('BINTRAY_TOKEN')
		}
		
		defaults {
		
			publications 'maven'
			properties = [ 'bintray.repo': 'kerovazzky/Kero-Security', 'bintray.package': 'Kero-Security:'+project.name, 'bintray.version': project.version ]
		}
	}
}

bintray {

	user = 'kerovazzky'
	key = System.getenv('BINTRAY_TOKEN')
	
	configurations = ['archives']
	publications = ['PomFile']
	
	pkg {
		
		repo = 'Kero-Security'
		name = project.name
		licenses = ['Apache-2.0']
		vcsUrl = project.git
	
		version {
	
			name = project.version
			vcsTag = project.vcsTag
			released  = new Date()
			
			gpg {
			
				sign = true
				passphrase = System.getenv('KEY_PASS')
            }
			
			mavenCentralSync {
				
				sync = true
				user = System.getenv('OSS_USER')
				password = System.getenv('OSS_PASS')
			}
		}
	}
}

task deploy() {
	
	if(version.endsWith("-SNAPSHOT")) {
	
		dependsOn artifactoryPublish
	}
	else {
	
		dependsOn bintrayUpload
		dependsOn artifactoryPublish
	}
}